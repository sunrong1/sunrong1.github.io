import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-DHV1cOW2.js";const e={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="算法-20" tabindex="-1"><a class="header-anchor" href="#算法-20"><span>算法 20</span></a></h1><p>9月14日到2月16日（除夕）5个月：金丹期，6个月元婴。<br> 目标凡人修仙之元婴级大佬</p><ol><li>练气期（基础巩固）：9月14日 - 10月14日（1个月）<br> ○ 目标：完成100道基础题（重点：数组、字符串、链表、栈、队列、排序、搜索、递归）。<br> ○ 题数里程碑：每10题为一层，共10层（练气1层10题、2层20题、...、10层100题）。<br> ○ 时间分配：每周约10题，每天2题左右（利用晚上1小时+早上地铁1h）。<br> ○ 多巴胺激励：每完成10题，奖励自己30分钟休闲（如看视频、咖啡、零食）；完成练气期，奖励一个周末家庭活动（如公园游玩）。<br> ○ 建议：使用LeetCode或牛客网，选择Easy和Medium题，注重理解基础概念。</li></ol><p>题目：<br><a href="https://leetcode.cn/studyplan/top-interview-150/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/studyplan/top-interview-150/</a><br> 开发地址：<br><a href="https://github.com/codespaces/vigilant-zebra-w49wx5j6vrc5v4x" target="_blank" rel="noopener noreferrer">https://github.com/codespaces/vigilant-zebra-w49wx5j6vrc5v4x</a></p><h2 id="整体算法学习计划" tabindex="-1"><a class="header-anchor" href="#整体算法学习计划"><span>整体算法学习计划</span></a></h2><p>总目标：完成200道算法题，并融会贯通，应对2026年3月前达到元婴级别。<br> 阶段详情：</p><ol><li>金丹期（高级主题）：1月1日 - 2月15日（1.5个月）<br> ○ 目标：完成50道困难题（总题数200题），重点：高级动态规划、图算法、系统设计基础、并发问题。<br> ○ 题数里程碑：金丹初期170题、金丹中期185题、金丹圆满200题。<br> ○ 时间分配：每周约5.5题，每天1题（困难题可能每天只能完成1题，周末复习）。<br> ○ 多巴胺激励：每完成20题，奖励自己一个电影夜；完成金丹期，奖励一个技术书籍或在线课程。<br> ○ 建议：注重解题思路和优化，学习面试技巧（如时间管理）。</li><li>元婴期（融会贯通）：2月16日 - 3月1日（2周）<br> ○ 目标：不增加新题，复习所有200题，进行模拟面试（使用Mock平台如Pramp）。<br> ○ 时间分配：每周复习50题，完成2-3次模拟面试。<br> ○ 多巴胺激励：每完成5次模拟面试，奖励自己一个休息日；完成元婴期，奖励一个家庭周末旅行。<br> ○ 建议：重点关注弱点和面试模拟，调整心态。</li><li>元婴期圆满（实际公司）：3月2日到5月1日<br> ○ 目标：保持手感，每天1-2题，模拟公司interview，健康调整。<br> ○ 多巴胺激励：每个Interview成功，奖励小礼物；面试后无论结果，奖励一次大餐。<br> ○ 建议：确保充足睡眠，避免 burnout。<br> 时间管理建议：<br> ● 每日流程：晚上9点到家后，休息30分钟，然后学习算法1小时（9:30-10:30）。通勤时间可听算法课程（如YouTube频道）或思考问题，但避免过度疲劳。<br> ● 周末学习：周六或周日安排2-3小时集中学习，但预留半天家庭时间。<br> ● 工具推荐：使用LeetCode刷题，搭配Notion或Excel跟踪进度；加入学习群组保持动力。<br> ● 家庭平衡：学习时可与孩子分享简单算法概念（如排序游戏），让他参与您的学习旅程，但确保有专属家庭时间。<br> 灵活性调整：<br> ● 如果某周进度落后，不要焦虑，调整下周目标。健康家庭第一。<br> ● 学习AI方面：算法是AI的基础，但当前集中算法面试，AI学习可暂放或每周花1小时了解概念。</li></ol><table><thead><tr><th>阶段</th><th>月份</th><th>核心目标</th><th>重点专题</th><th>关键练习题目（LeetCode）</th></tr></thead><tbody><tr><td>奠基</td><td>第1个月</td><td>建立算法思维基础</td><td>数组/字符串、哈希、链表、二叉树基础与递归</td><td>#283, #1, #206, #104, #226, #101</td></tr><tr><td>攻坚</td><td>第2个月</td><td>攻克核心数据结构</td><td>二叉树进阶、回溯、动态规划(一)、图基础</td><td>#105, #236, #124, #46, #78, #70, #53</td></tr><tr><td>深化</td><td>第3个月</td><td><strong>mastering 动态规划</strong></td><td>动态规划(二)(三)、贪心、系统设计算法</td><td>#122, #300, #1143, #322, #55, #146, #215</td></tr><tr><td>融合</td><td>第4个月</td><td>融会贯通与面试模拟</td><td>高频企业真题、综合复习、面试技巧</td><td>专项刷“二叉树”和“DP”高频题，模拟面试</td></tr></tbody></table><h2 id="前20的算法题过程和心得" tabindex="-1"><a class="header-anchor" href="#前20的算法题过程和心得"><span>前20的算法题过程和心得</span></a></h2><ol><li>第38周<br> 9-15~9-17:<br> 每天看3~4个题目，每天听一个数据和算法的极客时间一篇；但是做题的速度比较慢；一天不到1题；<br> 构建好了Java17的环境；</li></ol><p>9-18<sub>9</sub>20：<br> 听到了栈、队列;</p><p>更加准确和深度的理解了引用赋值和值复制，解决了长久的链表赋值的困惑：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //创建新的链表，带头节点</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> head </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ListNode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ret </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> head</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//临时指针变量</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ListNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//临时指针变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (t1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> t2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            //值比较，先插入t2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//值变量赋值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                t2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //引用赋值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                ret </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                t1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> t1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                ret </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>39周<br> 9-22 ~9-24<br> 听了数据结构的极客时间，听了排序的极客时间；<br> 理解不需要刚开始写完美的代码，有自己的思路和模板，养成绘图的习惯，更重要。<br> 学习递归、排序</li></ol><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h3><p>冒泡排序、插入排序、选择排序；</p><p>同事我们使用插入排序的时候更多。</p><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表"><span>链表</span></a></h3><ol><li>问题：链表复制，java在内存中到底做了什么？<br> ListNode slow = head;<br> ​slow创建了哪些储存空间？​​</li></ol><p>换句话说：当你写了这行代码时，​Java 在内存中到底分配了什么？slow是否占用了新的内存空间？它创建了新的链表节点吗？</p><p>问题：<br> ✅ （1）在栈内存中：<br> ​声明了一个新的变量 slow，类型为 ListNode，这个变量会保存一个引用（即内存地址）。<br> 这个变量 slow是方法内的一个 ​局部变量，它存在于 ​栈帧（stack frame）​​ 中。<br> ✅ （2）在赋值时：<br> 你将 head的值（也就是它保存的 ​引用 / 地址）​复制给了 slow。<br> 也就是说：​slow和 head现在指向的是堆内存中的同一个 ListNode对象（比如头节点）​。</p><p>🔁 ​总结：​​<br> 你​没有创建任何新的 ListNode对象​（也就是没有创建新的节点）。<br> 你​只是创建了一个新的引用变量 slow（在栈上）​，它指向了和 head相同的对象（在堆上）。</p>`,23)]))}const k=s(e,[["render",l]]),d=JSON.parse('{"path":"/dev/alg/alg-20.html","title":"算法 20","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-09-10T00:00:00.000Z","category":["算法"],"tag":["算法基础","方法论"],"star":true,"description":"算法 20 9月14日到2月16日（除夕）5个月：金丹期，6个月元婴。 目标凡人修仙之元婴级大佬 练气期（基础巩固）：9月14日 - 10月14日（1个月） ○ 目标：完成100道基础题（重点：数组、字符串、链表、栈、队列、排序、搜索、递归）。 ○ 题数里程碑：每10题为一层，共10层（练气1层10题、2层20题、...、10层100题）。 ○ 时间分...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法 20\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-23T05:48:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Sun\\",\\"url\\":\\"https://sunrong.site\\"}]}"],["meta",{"property":"og:url","content":"https://sunrong1.github.io/dev/alg/alg-20.html"}],["meta",{"property":"og:site_name","content":"TestingFun"}],["meta",{"property":"og:title","content":"算法 20"}],["meta",{"property":"og:description","content":"算法 20 9月14日到2月16日（除夕）5个月：金丹期，6个月元婴。 目标凡人修仙之元婴级大佬 练气期（基础巩固）：9月14日 - 10月14日（1个月） ○ 目标：完成100道基础题（重点：数组、字符串、链表、栈、队列、排序、搜索、递归）。 ○ 题数里程碑：每10题为一层，共10层（练气1层10题、2层20题、...、10层100题）。 ○ 时间分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T05:48:35.000Z"}],["meta",{"property":"article:tag","content":"方法论"}],["meta",{"property":"article:tag","content":"算法基础"}],["meta",{"property":"article:published_time","content":"2025-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T05:48:35.000Z"}]]},"git":{"createdTime":1757481674000,"updatedTime":1758606515000,"contributors":[{"name":"Dave","username":"Dave","email":"sunrong1990@126.com","commits":8,"url":"https://github.com/Dave"}]},"readingTime":{"minutes":5.29,"words":1587},"filePathRelative":"dev/alg/alg-20.md","excerpt":"\\n<p>9月14日到2月16日（除夕）5个月：金丹期，6个月元婴。<br>\\n目标凡人修仙之元婴级大佬</p>\\n<ol>\\n<li>练气期（基础巩固）：9月14日 - 10月14日（1个月）<br>\\n○ 目标：完成100道基础题（重点：数组、字符串、链表、栈、队列、排序、搜索、递归）。<br>\\n○ 题数里程碑：每10题为一层，共10层（练气1层10题、2层20题、...、10层100题）。<br>\\n○ 时间分配：每周约10题，每天2题左右（利用晚上1小时+早上地铁1h）。<br>\\n○ 多巴胺激励：每完成10题，奖励自己30分钟休闲（如看视频、咖啡、零食）；完成练气期，奖励一个周末家庭活动（如公园游玩）。<br>\\n○ 建议：使用LeetCode或牛客网，选择Easy和Medium题，注重理解基础概念。</li>\\n</ol>","autoDesc":true}');export{k as comp,d as data};
